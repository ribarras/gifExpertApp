{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItems.js","components/GifGrid.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","d","placeholder","type","value","onChange","console","log","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItems","className","src","alt","GifGrid","GifExpertApp","categories","categorie","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kMAmCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAC,MAAI,CAACP,MACpBC,EAAc,MAKhB,SACE,uBACEO,YAAa,SACbC,KAAK,OACLC,MAAOV,EACPW,SAnBoB,SAACR,GACzBS,QAAQC,IAAIV,EAAEW,OAAOJ,OACrBT,EAAcE,EAAEW,OAAOJ,a,8BCRdK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAOF,GAFL,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARjB,kBAWdM,GAXc,4CAAH,sDCuBLO,EAnBM,SAACf,GACpB,MAA0BjB,mBAAS,CACjCwB,KAAK,GACLS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAAAC,GAAI,OACzBH,EAAS,CACPX,KAAMc,EACNL,SAAS,SAGZ,CAAChB,IAEGiB,GCNMK,EAXM,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC7B,OACE,sBAAKqB,UAAU,yCAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKC,IAAMtB,EAAMuB,IAAMb,MAEzB,4BAAKA,QCiBIc,EArBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SACjB,EAAgCe,EAAaf,GAAjCa,EAAZ,EAAON,KAAaS,EAApB,EAAoBA,QAEpB,OACE,qCACE,oBAAIO,UAAU,oCAAd,SAAoDvB,IACpD,oBAAIuB,UAAU,0CAAd,SAAyDP,GAAW,gBACpE,qBAAKO,UAAU,8BAAf,SAEMV,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEOA,GADCA,EAAIC,aCQbgB,EAnBM,WACnB,MAAoC5C,mBAAS,CAAC,SAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEI8C,EAAWnB,KAAK,SAAAoB,GAAS,OACvB,cAAC,EAAD,CAAyB7B,SAAU6B,GAArBA,YCHXC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.96d92b6e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    console.log(e.target.value)\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2){\n      setCategories(d => [inputValue])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input \n        placeholder={'Buscar'}\n        type='text'\n        value={inputValue}\n        onChange={ handleInputChange }\n      />\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGift = async ( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=g6HngUdYLqxqgPZy2qZMK69WPFWrGXrU`\n  const resp = await fetch( url )\n  const { data } = await resp.json()\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return gifs\n}","import { useState, useEffect } from \"react\";\nimport { getGift } from \"../helpers/getGifs\";\n\n\nconst useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data:[],\n    loading: true\n  })\n  \n  useEffect(() => {\n    getGift(category).then(imgs => (\n      setstate({\n        data: imgs,\n        loading: false\n      })\n    )) \n  }, [category])\n  \n  return state\n\n}\n\nexport default useFetchGifs;\n","import React from 'react';\n\nconst GifGridItems = ({ title, url }) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <div className='card-img'>\n        <img src={ url } alt={ title } />\n      </div>\n      <p>{ title }</p>\n    </div>\n  );\n}\n\nexport default GifGridItems;\n","import React from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItems from './GifGridItems';\n\nconst GifGrid = ({ category }) => {\n  const {data:images, loading} =  useFetchGifs(category)\n\n  return (\n    <>   \n      <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\n      <h1 className='charge animate__animated animate__flash'>{loading && 'Cargando...'}</h1>\n      <div className='card-grid animate__animated'>\n          {\n            images.map( img => (\n                <GifGridItems \n                  key={ img.id }\n                  { ...img } \n                />\n            ))\n          }\n      </div>\n    </>  \n  );\n}\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Goku'])\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n      <ol>\n        {\n          categories.map( categorie => (\n            <GifGrid key={categorie} category={categorie} />\n          ))\n        }\n      </ol>\n    </div>\n  );\n}\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}